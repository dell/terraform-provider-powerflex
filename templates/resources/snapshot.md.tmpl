---
# Copyright (c) 2023-2024 Dell Inc., or its subsidiaries. All Rights Reserved.
# 
# Licensed under the Mozilla Public License Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://mozilla.org/MPL/2.0/
# 
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

title: "{{.Name }} {{.Type | lower}}"
linkTitle: "{{.Name }}"
page_title: "{{.Name}} {{.Type}} - {{.ProviderName}}"
subcategory: ""
description: |-
{{ .Description | plainmarkdown | trimspace | prefixlines "  " }}
---

# {{.Name }} ({{.Type}})

{{ .Description | trimspace }}

> **Caution:** <span style='color: red;' >Snapshot creation or update is not atomic. In case of partially completed create operations, terraform can mark the resource as tainted.
One can manually remove the taint and try applying the configuration (after making necessary adjustments).
If the taint is not removed, terraform will destroy and recreate the resource.</span>

> **Note:** Either `volume_name` or `volume_id` is required. But not both.
<span style='color: red;' >In case of partial create/update operation, retention will not be set.</span>

{{ if .HasExample -}}
## Example Usage

{{tffile .ExampleFile }}
{{- end }}

After the execution of above resource block, snapshot would have been created on the PowerFlex array. For more information, please check the terraform state file.

{{ .SchemaMarkdown | trimspace }}

{{ if .HasImport -}}
## Import

Import is supported using the following syntax:

{{codefile "shell" .ImportFile }}

1. This will import the snapshot instance with specified ID into your Terraform state.
2. After successful import, you can run terraform state list to ensure the resource has been imported successfully.
3. Now, you can fill in the resource block with the appropriate arguments and settings that match the imported resource's real-world configuration.
4. Execute terraform plan to see if your configuration and the imported resource are in sync. Make adjustments if needed.
5. Finally, execute terraform apply to bring the resource fully under Terraform's management.
6. Now, the resource which was not part of terraform became part of Terraform managed infrastructure.
{{- end }}